{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["import { Table, Entity } from \"dynamodb-toolbox\";\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nimport { DynamoDBDocumentClient } from \"@aws-sdk/lib-dynamodb\";\nimport { z } from \"zod\";\nimport ms from \"ms\";\nimport { randomBytes } from \"crypto\";\n\n/* ------------------------------------------------------------------------------------------------------------\n * Session\n * ------------------------------------------------------------------------------------------------------------ */\nexport const SessionSchema = {\n  name: \"Session\",\n  attributes: {\n    id: { type: \"string\", default: () => randomBytes(16).toString(\"hex\") },\n    pk: { partitionKey: true, type: \"string\", default: (data: { id: string }) => `session#${data.id}` },\n    sk: { sortKey: true, type: \"string\", default: (data: { id: string }) => `session#${data.id}` },\n    gsi1pk: { type: \"string\", dependsOn: \"userId\", default: (data: { userId: string }) => `user#${data.userId}` },\n    gsi1sk: { type: \"string\", dependsOn: \"id\", default: (data: { pk: string }) => data.pk },\n    userId: { type: \"number\", required: true },\n    username: { type: \"string\", required: true },\n    name: { type: \"string\", required: true },\n    avatarUrl: { type: \"string\" },\n    githubUrl: { type: \"string\", required: true },\n    roles: { type: \"list\" },\n    ttl: { type: \"number\", required: true },\n  },\n} as const;\n\nexport const ZSession = z.object({\n  id: z.string(),\n  pk: z.string(),\n  sk: z.string(),\n  userId: z.number(),\n  username: z.string(),\n  name: z.string(),\n  avatarUrl: z.string().optional(),\n  githubUrl: z.string(),\n  roles: z.preprocess((val) => (val ? val : []), z.string().array()),\n  ttl: z.number(),\n  modified: z.string(),\n  created: z.string(),\n  entity: z.string(),\n});\n\nexport type SessionType = ReturnType<typeof ZSession.parse>;\n\n/* ------------------------------------------------------------------------------------------------------------\n * OAuthStateCode\n * ------------------------------------------------------------------------------------------------------------ */\nexport const ZCode = z.object({ id: z.string(), redirectUri: z.string().optional() });\n\nexport const OAuthStateCodeSchema = {\n  name: \"OAuthStateCode\",\n  attributes: {\n    id: { type: \"string\", default: () => randomBytes(16).toString(\"hex\") },\n    pk: { partitionKey: true, type: \"string\", default: (data: { id: string }) => `oauth_state_code#${data.id}` },\n    sk: { sortKey: true, type: \"string\", default: (data: { id: string }) => `oauth_state_code#${data.id}` },\n    redirectUri: { type: \"string\" },\n    code: {\n      type: \"string\",\n      dependsOn: [\"id\", \"redirectUri\"],\n      default: (data: { id: string; redirectUri?: string }) => JSON.stringify(ZCode.parse(data)),\n    },\n    ttl: { type: \"number\", default: () => Math.round((new Date().getTime() + ms(\"15m\")) / 1000) },\n  },\n} as const;\n\nexport const ZOAuthStateCode = z.object({\n  id: z.string(),\n  pk: z.string(),\n  sk: z.string(),\n  redirectUri: z.string().optional(),\n  code: z.string(),\n  ttl: z.number(),\n  modified: z.string(),\n  created: z.string(),\n  entity: z.string(),\n});\n\nexport type OAuthStateCodeType = ReturnType<typeof ZOAuthStateCode.parse>;\n\n/* ------------------------------------------------------------------------------------------------------------\n * OAuthMock\n * ------------------------------------------------------------------------------------------------------------ */\nexport const OAuthMockSchema = {\n  name: \"OAuthMock\",\n  attributes: {\n    id: { type: \"string\", required: true },\n    pk: { partitionKey: true, type: \"string\", default: (data: { id: string }) => `oauth_mock#${data.id}` },\n    sk: { sortKey: true, type: \"string\", default: (data: { id: string }) => `oauth_mock#${data.id}` },\n    userId: { type: \"number\", required: true },\n    ttl: { type: \"number\", default: () => Math.round((new Date().getTime() + ms(\"15m\")) / 1000) },\n  },\n} as const;\n\nexport const ZOAuthMock = z.object({\n  id: z.string(),\n  pk: z.string(),\n  sk: z.string(),\n  userId: z.number(),\n  ttl: z.number(),\n  modified: z.string(),\n  created: z.string(),\n  entity: z.string(),\n});\n\nexport type OAuthMock = ReturnType<typeof ZOAuthMock.parse>;\n\n/* ------------------------------------------------------------------------------------------------------------\n * Ddb\n * ------------------------------------------------------------------------------------------------------------ */\n\nconst marshallOptions = {\n  // Whether to automatically convert empty strings, blobs, and sets to `null`.\n  convertEmptyValues: false, // if not false explicitly, we set it to true.\n  // Whether to remove undefined values while marshalling.\n  removeUndefinedValues: false, // false, by default.\n  // Whether to convert typeof object to map attribute.\n  convertClassInstanceToMap: false, // false, by default.\n};\n\nconst unmarshallOptions = {\n  // Whether to return numbers as a string instead of converting them to native JavaScript numbers.\n  // NOTE: this is required to be true in order to use the bigint data type.\n  wrapNumbers: false, // false, by default.\n};\n\nconst translateConfig = { marshallOptions, unmarshallOptions };\n\nexport class Ddb {\n  table: Table<string, \"pk\", \"sk\">;\n\n  entities = {\n    oauthStateCode: new Entity(OAuthStateCodeSchema),\n    session: new Entity(SessionSchema),\n    oauthMock: new Entity(OAuthMockSchema),\n  };\n\n  constructor(props: { tableName: string; client: DynamoDBClient }) {\n    this.table = new Table({\n      name: props.tableName,\n      partitionKey: \"pk\",\n      sortKey: \"sk\",\n      // gsi1 is used to search for all session of a user.\n      // @example { gsi1pk: \"user#<userId>\", gsi1sk: \"session#<sessionId>\" }\n      indexes: { gsi1: { partitionKey: \"gsi1pk\", sortKey: \"gsi1sk\" } },\n      DocumentClient: DynamoDBDocumentClient.from(props.client, translateConfig),\n    });\n\n    // assign the table to all entities\n    for (let entity of Object.values(this.entities)) {\n      entity.table = this.table as any;\n    }\n  }\n}\n"],"names":["SessionSchema","name","attributes","id","type","default","randomBytes","toString","pk","partitionKey","data","sk","sortKey","gsi1pk","dependsOn","userId","gsi1sk","required","username","avatarUrl","githubUrl","roles","ttl","ZSession","z","object","string","number","optional","preprocess","val","array","modified","created","entity","ZCode","redirectUri","OAuthStateCodeSchema","code","JSON","stringify","parse","Math","round","Date","getTime","ms","ZOAuthStateCode","OAuthMockSchema","ZOAuthMock","translateConfig","marshallOptions","convertEmptyValues","removeUndefinedValues","convertClassInstanceToMap","unmarshallOptions","wrapNumbers","Ddb","props","table","entities","oauthStateCode","Entity","session","oauthMock","this","Table","tableName","indexes","gsi1","DocumentClient","DynamoDBDocumentClient","from","client","_i","_Object$values","Object","values","length"],"mappings":"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"}